---
import remarkParse from "remark-parse";
import remarkGfm from "remark-gfm";
import remarkRehype from "remark-rehype";
import rehypeStringify from "rehype-stringify";
import { unified } from "unified";
import { fetchPosts } from "../../esa-utils/fetch";
import Layout from "../../layouts/Layout.astro";
import Footer from "../../components/footer.astro";

/**
 * 動的にページを生成するときに必須の関数
 *
 * @see https://docs.astro.build/ja/reference/routing-reference/#getstaticpaths
 */
export async function getStaticPaths() {
  const response = await fetchPosts();
  const posts = response.posts;
  const paths = posts.map((post) => ({
    params: { id: post.number },
    props: { post: post },
  }));
  return paths;
}

const { post } = Astro.props;
const articleHtml = unified()
  .use(remarkParse)
  .use(remarkGfm)
  .use(remarkRehype, { allowDangerousHtml: true })
  .use(rehypeStringify, { allowDangerousHtml: true })
  .processSync(post.body_md)
  .toString();
---

<Layout pageTitle={post.name}>
  <header>
    <h1><a href="../">新入生情報Web</a></h1>
  </header>
  <h1>{post.name}</h1>
  <article set:html={articleHtml} />

  <nav class="toc-nav">
    <div class="toc-title">
      <h2>目次</h2>
    </div>
    <div class="toc"></div>
  </nav>

  <script>
    import * as tocbot from "tocbot";

    tocbot.init({
      tocSelector: ".toc", // 目次を追加するクラス名
      contentSelector: "article", // 目次を取得するコンテンツ
      activeLinkClass: "to-link-active", // アクティブになった時のクラス名
      listClass: "toc-list", // olのクラス名
      linkClass: "toc-link", // aタグのクラス名
      headingSelector: "h2, h3", // 目次として取得する見出しタグ
    });
  </script>
  <Footer />
</Layout>

<style is:inline>
  body {
    padding-left: 5px;
  }
  img {
    width: 100%;
    height: auto;
    display: block;
  }
  article {
    margin: 8px;
  }
  h1 {
    font-size: 2rem;
  }
  table,
  th,
  td {
    margin: 0;
    border-spacing: 0;
  }
  th,
  td {
    border-inline-start: 1px solid var(--border-color);
    border-block-start: 1px solid var(--border-color);
  }
  th:last-of-type,
  td:last-of-type {
    border-inline-end: 1px solid var(--border-color);
  }
  tr:last-of-type {
    td {
      border-block-end: 1px solid var(--border-color);
    }
  }
</style>
